Overall Design:
The game will be focused on a free roaming character that aims to collect as many powerup objects 
(which collect points) as possible within a given amount of time while avoiding enemy objects 
(which subtract points). The character will aim to get as many points as they can in the given time 
(probably 30 seconds) but can die prematurely if they fall off the map.

For the character package, the cube shaped character will have basic movements. It will move forward
with W and backwards with S. It will rotate right and left with D and A but can be toggled to 
strafe left and right with D and A instead. The character will be able to jump using the spacebar. 
The character will naturally fall using gravity where it falls as long as nothing is below the 
character supporting it. The character will be able to walk up angled surfaces as long as they are
actively walking, otherwise they will slide backwards down the slope. The character will interact
with ledges in 3 ways from falling off with gravity when they step off, holding down a certain 
key to walk to but not off the edge of the ledge, and holding down another key to alternate 
between hanging on the ledge and pulling themselves up/falling down. The character will also be 
able to swim in a water area where it gets slowed down by the water and sinks naturally until the
spacebar is used to move the character back up. The custom movement will be a double jump used 
to reach especially high powerups. The object will interact with powerup objects by absorbing 
them to get points and might interact with enemy objects by getting poked to lose points.

There will be a map of scattered powerup objects and enemy objects. There will be different surfaces 
such as a sloped water area where the player can swim in addition to the normal map area where the 
character can move around, jump, and double jump. 

There will be a main menu GUI as well as an in game menu GUI as well as a gameplay GUI. The gameplay 
GUI will simply have the accumulated points from the current round as well as a timer with the 
amount of time left in the round. The in-game menu GUI will have lots of controls from a left/right 
toggle that switches the A and D inputs to go from rotating the character to strafing the character 
(and therefore changes the camera from connected to the character rotation to mouse controlled). It 
will also have a slide for background music volume as well as a toggle that turns it off completely. 
It will also have a slide for in game sound effects as well as a toggle that turns it off 
completely. The main menu GUI will have the same items as the in-game menu GUI in addition to a 
start button.

There will be 3 different sound effects in addition to the background music. The first sound effect 
will be a empty clonk sound when the character tries to interact with nothing interactable within 
range. The second sound effect will be a squish sound for when the character interacts with a 
powerup and absorbs it. The third sound effect will be a pained sound for when the character 
interacts with a enemy and gets poked.

The camera will be positioned in an over the shoulder 3rd person POV where the camera follows the 
character as they move around the map. It will move forward and backwards along with the character 
in addition to up and down as the character jumps/swims. 


Software Architecture and Plan:
There will be a basic character class extending from a CharacterBody3D node. We will use this 
character class in a custom prefab where it has a mesh for texture and a collision node as children 
nodes. There will be a character prefab that takes the previous prefab and combines it with a 
camera and raycast to have the character and camera setup together.

There will also be powerup (food) and enemy (cactus) classes that extend from CharacterBody3D node
and will each be used as custom prefabs where they have a mesh for texture and a collision node as 
children nodes. 

There will be a basic platform node for the ground. There will be a map scene that is composed of 
different platform nodes put together in a way that has different elevations and makes an uneven 
ground. 

The main scene will be created with the map scene as the base child. The main scene will also have 
the character and camera prefab. Lastly, the main scene will have many powerup and enemy prefabs as 
well scattered throughout the map.

The game will be structured as a main menu display outside of the game, in-game gameplay with a 
countdowntimer, and a pause screen while the gameplay GUI is active.

The player package will take the majority of the time since it is the beginning and has all the 
foundational structure. It will take a few days to get all of the movements smoothly integrated but 
will take a lot of time at the beginning to set up basic movement and connecting input to the 
character. The camera control will also take quite a while to set up since we are meant to connect 
everything through GDExtension and we have never interacted with a camera through GDExtension 
primarily before. The sound effects and background music wonâ€™t take too long since they are as 
straightforward as importing the sounds into the project and triggering each of them at the right 
time. We have also never used gravity yet but we are using a CharacterBody3D node so we are hoping 
the physics will be quite straightforward at least gravity wise. The GUI will be quite difficult to 
implement since it is in connection to so many areas. It controls the start of the game, controls 
different audios (both background music as well as sound effects), controls character input 
(A and D toggle), and changes the game state from before game to in game to paused game. This will 
be quite logic heavy and will require detailed design. 


Division of Labor:
We plan to all meet up consistently each evening throughout the week and for a bit over the weekend 
since scheduling over weekends is quite difficult. We plan to meet after class every MWF and to call 
in the evening time on TTH. We believe that working on individual parts and consistently meeting up 
to put the parts together is much more efficient than working on everything separately and combining 
them together at once in a huge attempt at the end. Therefore, we will be spending most of our time 
together working consistently rather than separately. We plan to all work on the player package 
together since it is the foundation of the project. Silas will focus on sound effects, sound effect 
control, and physics of the different objects. Aidan will focus on the camera setup and camera 
control as we toggle through different input choices (A and D toggle). Josh will work on the GUI and 
on figuring out how to keep game state consistent with the GUI state.
